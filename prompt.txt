### Background
The modeling and solution process for fuzzy propositions in the context of the Green Vehicle Routing Problem with Time Windows and Capacity Constraints (GCVRPTW) (focusing on fairness and sustainability for delivery drivers, customers). Consider the sustainability influenced by the route fairness and load fairness of delivery drivers, as well as the service fairness and service satisfaction of customers.
Modeling contexts of fairness and sustainable, consider relationships of  customers, drivers, load and routes distance. 
For delivery drivers, factors such as differences in working hours, differences in vehicle load levels, and differences in the length of assigned routes may be considered. For customers, factors like differences in service satisfaction and service quality may be taken into account. Additionally, the context of sustainability in enterprise development, which is influenced by both drivers and customers, should be considered.

$\mathcal{F}_s := \left\{
\begin{array}{l}
p_1: \text{implies}\left( \text{or}\left( D_{\text{loadDiff}} \text{ is Low}, D_{\text{routeLenDiff}} \text{ is Low} \right), F \text{ is High} \right), \\
\quad \text{where } D_{\text{loadDiff}} = (\text{Driver Load Difference}), D_{\text{routeLenDiff}} = (\text{Route Length Difference}), F = (\text{Fairness}) \\
p_2: \text{and}\left( O_{\text{driver}} \text{ is Low}, N_{\text{driver}} \text{ is Medium or Low} \right), \\
\quad \text{where } O_{\text{driver}} = (\text{Driver Overtime Hours}), N_{\text{driver}} = (\text{Driver Count}) \\
p_3: \text{implies}\left( S_{\text{custAvg}} \text{ is High}, Q_{\text{service}} \text{ is High} \right), \\
\quad \text{where } S_{\text{custAvg}} = (\text{Customer Avg Satisfaction}), Q_{\text{service}} = (\text{Service Quality}) \\
p_4: U_{\text{capacity}} \text{ is Medium(0.5-0.2,0.5+0.2)}, \\
\quad \text{where } U_{\text{capacity}} = (\text{Capacity Utilization}) 
\end{array}
\right\}$

Original Matlab code for `CalObj2`:
        function [PopObj, PopCon, routesList, C1, C2, C3, C4, ALPHA] = CalObj2(obj, PopDec)
                
            % CalObj2 - Calculate bi-criteria objectives, constraint violations, and route lists
            % Input Parameters:
            %   obj - Problem object containing distance matrix, demands, time windows, etc.
            %   PopDec - Population decision matrix (each row is a chromosome encoding)
            % Output Parameters:
            %   PopObj - Bi-criteria objective matrix [total cost, -total customer satisfaction]
            %   PopCon - Constraint violation value (penalty function sum)
            %   routesList - Cell array of routes (customer nodes per route)
        
            % Initialize output parameters
            N = size(PopDec, 1);                  % Population size
            PopObj = zeros(N, 2);                % Dual objectives: [total cost, -total customer satisfaction]
            PopCon = zeros(N, 1);                % Constraint violation values
            routesList = cell(N, 1);             % List of routes (only non-empty routes)
            C1 = cell(N, 1);                     % Economic cost (€)
            C2 = cell(N, 1);                     % Environmental cost (€)
            C3 = cell(N, 1);                     % Social cost (accident risk, €)
            C4 = cell(N, 1);                     % Total customer satisfaction
            ALPHA = cell(N,1);                   % Truth values for fuzzy proposition constraints (reserved)
        
            % Core parameters (revised fuel efficiency definition: 0.052 L/KM)
            depotIdxs = obj.depotIdxs;            % Depot node indices
            maxVehicles = obj.car;                % Maximum number of vehicles
            Q = obj.capacity;                     % Vehicle capacity constraint
            FC = 67.62;                           % Fixed vehicle cost (€/trip)
            DW = 9.91 / 60;                       % Driver cost (€/minute, converted from 9.91€/hour)
            Cf = 1.58;                            % Fuel price (€/l)
            fuelEfficiency = 0.052;               % Fuel efficiency (L/KM, 0.052 liters consumed per kilometer)
            Ce = 0.02;                            % Carbon emission cost (€/kg CO₂)
            gamma = 0.75;                         % Carbon emission factor (kg CO₂/l)
            a = 0.0005;                           % Accident risk coefficient (€/kg·km)
            
            % Penalty factors
            capPenalty = 10000;    % Penalty for capacity constraints
            timePenalty = 10000;   % Penalty for time window constraints
            
            % Iterate through each solution in the population
            for i = 1:N
                % 1. Parse chromosome and extract non-empty routes
                chrom = PopDec(i, PopDec(i, :) ~= -1);  % Remove placeholder -1
                if isempty(chrom), chrom = depotIdxs(1); end
                
                % Ensure routes start from depot (assume vehicles depart from depot)
                if ~ismember(chrom(1), depotIdxs)
                    firstDepot = find(ismember(chrom, depotIdxs), 1);
                    chrom = [chrom(firstDepot), chrom(1:firstDepot-1), chrom(firstDepot+1:end)];
                end
                
                % Split routes and filter empty ones (only keep routes with customers)
                depotPos = find(ismember(chrom, depotIdxs));
                depotPos = [depotPos, length(chrom)+1];
                validRoutes = {};
                for r = 1:length(depotPos)-1
                    startIdx = depotPos(r);
                    endIdx = depotPos(r+1)-1;
                    routeCustomers = chrom(startIdx+1:endIdx);
                    routeCustomers = routeCustomers(~ismember(routeCustomers, depotIdxs));
                    if ~isempty(routeCustomers)
                        validRoutes{end+1} = routeCustomers;
                    end
                end
                routesList{i} = validRoutes;
                numValidRoutes = length(validRoutes);
                
                % 2. Initialize cost and constraint variables
                totalEconomic = 0;    % Economic cost
                totalEnvironmental = 0;  % Environmental cost
                totalSocial = 0;       % Social cost
                totalSatisfaction = 0; % Customer satisfaction
                capViolation = 0;      % Capacity constraint violation
                timeViolation = 0;     % Time window constraint violation
                served = zeros(1, length(obj.demand));  % Mark served customers
                current_alpha = 0;     % Current Global Truth value for fuzzy propositions (reserved)
        
                % 3. Calculate costs and constraints for non-empty routes
                for r = 1:numValidRoutes
                    route = validRoutes{r};
                    routeWithDepot = [0, route, 0];  % Start and end at depot (closed route)
                    routeLen = length(routeWithDepot);
                    
                    % Total demand of the route (initial load)
                    demandIdxs = route + 1;
                    totalDemand = sum(obj.demand(demandIdxs));
                    currLoad = totalDemand;  % Delivery scenario: load decreases after delivery
                    
                    % Check capacity constraint
                    if totalDemand > Q
                        capViolation = capViolation + (totalDemand - Q);
                    end
                    
                    % Initialize route variables
                    distTotal = 0;       % Total distance (km)
                    fuelTotal = 0;       % Total fuel consumption (l)
                    timeTotal = 0;       % Total driving time (minutes)
                    arrivalTime = 0;     % Current arrival time (minutes)
                    
                    % Iterate through each node pair in the route (i→j)
                    for k = 1:routeLen-1
                        from = routeWithDepot(k);
                        to = routeWithDepot(k+1);
                        dist = obj.C(from+1, to+1);  % Distance (km)
                        
                        
                        v = 60;  % km/h average speed (km/h)
                        
                        % Calculate driving time (minutes): (distance/speed)×60 (convert hours to minutes)
                        travelTimeMin = (dist / v) * 60;  % minutes
                        timeTotal = timeTotal + travelTimeMin;
                        arrivalTime = arrivalTime + travelTimeMin;
                        
                        % Calculate fuel consumption (core: based on 0.052 L/KM)
                        fuel = fuelEfficiency * dist;  % Fuel (l) = consumption per km × distance
                        fuelTotal = fuelTotal + fuel;
                        distTotal = distTotal + dist;
                        
                        % Carbon emission cost (environmental cost)
                        emissionCost = Ce * fuel * gamma;
                        totalEnvironmental = totalEnvironmental + emissionCost;
                        
                        % Accident risk cost (social cost)
                        if to > 0
                            accidentCost = a * dist * currLoad;
                            totalSocial = totalSocial + accidentCost;
                        end
                        
                        % Process customer node service
                        if to > 0 && ~served(to)
                            served(to) = 1;
                            
                            % Check time window constraints (unit: minutes)
                            custIdx = to + 1;
                            ready = obj.readyTime(custIdx);  % Earliest customer time (minutes)
                            due = obj.dueTime(custIdx);      % Latest customer time (minutes)
                            
                            % Handle waiting/lateness
                            if arrivalTime < ready
                                arrivalTime = ready;  % Wait until earliest time
                            elseif arrivalTime > due
                                timeViolation = timeViolation + (arrivalTime - due);  % Lateness time
                            end
                            
                            % Calculate customer satisfaction (based on time window deviation)
                            prefTime = (ready + due) / 2;  % Preferred time (minutes)
                            timeDiff = abs(arrivalTime - prefTime);  % minutes
                            windowWidth = due - ready;  % minutes
                            if windowWidth > 0
                                satisfaction = 100 * max(0, 1 - 2*timeDiff/windowWidth);
                            else
                                satisfaction = 0;
                            end
                            totalSatisfaction = totalSatisfaction + satisfaction;
                            
                            % Reduce load after delivery (only for delivery scenarios)
                            currLoad = currLoad - obj.demand(custIdx);
                            
                            % Add service time (minutes, directly accumulated)
                            arrivalTime = arrivalTime + obj.serviceTime(custIdx);
                        end
                    end
                    
                    % Calculate economic cost
                    vehicleCost = FC;  % Fixed cost counted once for non-empty routes
                    driverCost = DW * timeTotal;  % Driver cost (€/minute × minutes)
                    fuelCost = Cf * fuelTotal;    % Fuel cost (€)
                    economicCost = vehicleCost + driverCost + fuelCost;
                    totalEconomic = totalEconomic + economicCost;
                end
                
                % 4. Assign constraint violations and objective functions
                PopCon(i) = capPenalty * capViolation + timePenalty * timeViolation;
                PopObj(i, :) = [totalEconomic + totalEnvironmental + totalSocial, -totalSatisfaction];
                
                % Store costs for each dimension
                C1{i} = totalEconomic;
                C2{i} = totalEnvironmental;
                C3{i} = totalSocial;
                C4{i} = totalSatisfaction;
                ALPHA{i} = current_alpha; 
            end
        end

#### 1. Modeling Foundations for Fuzzy Propositions  
- **Select the universe of discourse for the variables of the propositions to ensure Problem could be sloved.
- **Variable Standardization**: Variables are linearly mapped to the [0,1] range.  
- **Linguistic Term Definition**: Fuzzy terms such as "High," "Medium," and "Low" are used to describe variables.  
- **Logical Connectives**: Include operations like AND, OR, implies, NOT, with connective families such as Łukasiewicz, Zadeh, Gödel, and Product.  
- **Proposition Structures**:  
  - Conditional and qualified propositions (e.g., "V is F and (W is G or Y is not H)").  
  - Conditional and unqualified propositions (e.g., "If V is F, then W is G").  
  - Unconditional and unqualified propositions (e.g., "V is F").  

#### 2. Workflow for Fuzzy Proposition Integration  
The process starts with a context \(\mathcal{F}_s\)，which is defined by a set of fuzzy propositions (\(F_s\)). These propositions are integrated using t-norm operators (e.g., Zadeh's min) to form an aggregated context. The truth value of each proposition is computed, and all truth values are further aggregated into an overall truth degree via t-norm. A global threshold \(\alpha = 0.6\) (minimum acceptable overall truth for \(\mathcal{F}_s\)) is introduced. If the aggregated overall truth degree is less than \(\alpha\), the fuzzy constraint violation is calculated, multiplied by a penalty factor \(10^5\), and used to update the total constraint violation (PopCon).  

### Task Requirements  
**Objective**: Design membership functions based on \(F_s\), and embed them into the `CalObj2` function to generate the final code.  

**Output (In English)**:  
1. Logical proposition set \(F_s = \{p_1: \ldots, p_2: \ldots, p_3: \ldots\, p_4: \ldots\}\).  
2. Regarding the constraints on the universe of discourse, please reasonably select the universe of discourse for the variables of the membership function.
3. Definitions and descriptions of membership functions for each proposition in \(F_s\).  
4. A complete `CalObj2` function (Matlab code) that integrates the above elements
5.Please use the correct MATLAB syntax (Dont use ternary operator and corretly use if-else-end). 
6.If the membership function is implemented in the form of a helper function, it should inherit from 'obj'. If use auxfunctions，plaese correctly define and when invoking it, use obj.helperFunction (eg. output  = Auxfunctions(obj,...))..
